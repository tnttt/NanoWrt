# MIT License
# 
# Copyright (c) 2020 vinewx
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


name: OpenWrt for NanoPi-NEO2

on:
  workflow_dispatch:
   
  schedule:
    - cron: '10 0 * * 5'

jobs:

  build:
    
    runs-on: ubuntu-20.04
    if: github.repository == 'tnttt/NanoWrt'
    
    steps:

      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: master

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d
          sudo apt-get update
          sudo apt-get -y install quilt subversion bc build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler python3 python2.7 g++-multilib antlr3 gperf wget curl swig rsync
          wget -O - https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh | bash
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk

      - name: Init Source
        run: |
          git clone https://github.com/vinewx/linux kernel
          git clone https://github.com/vinewx/u-boot --depth 1
          git clone https://github.com/vinewx/prebuilts toolchain --depth 1
          git clone https://github.com/vinewx/openwrt_scripts scripts --depth 1
          git clone -b v19.07.1 https://git.openwrt.org/openwrt/openwrt.git
          ln -s scripts/build.sh build.sh
          ln -s scripts/sd-fuse/out out

      - name: Mods
        run: |
          cat app_config.seed >> configs/config_h5
          cat forbid_config.seed | openssl enc -aes-256-cbc -a -d -pass pass:"vinewx" -pbkdf2 >> configs/config_h5
          cat nanohat_config.seed >> configs/config_h5
          sed -i '/install/i\./../script/Mods_BeforeBuild.sh' scripts/mk-openwrt.sh
          sed -i 's/set -eu/set -u/' scripts/mk-openwrt.sh
          pushd openwrt
          . ../script/extra.sh
          sed -i 's/dnsmasq /dnsmasq-full /' include/target.mk
          sed -i '/luci/Id;/packages/Id;' feeds.conf.default
          sed -i '/routing/i\src-git packages https://github.com/friendlyarm/friendlywrt_project_packages^606051a952a3a7c2a7fb0bccb6230617d211067c' feeds.conf.default
          sed -i '/routing/i\src-git luci https://github.com/coolsnowwolf/luci' feeds.conf.default
          sed -i '$a src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default
          sed -i '$a src-git small https://github.com/kenzok8/small' feeds.conf.default
          sed -i '/routing/a\src-git NanoHatOLED https://github.com/vinewx/NanoHatOLED.git' feeds.conf.default
          cat ../script/settings.sh > package/lean/default-settings/files/zzz-default-settings
          popd
          pushd kernel
          quilt import ../patch/*
          quilt push -a
          popd

      - name: Build OpenWrt
        run: |
          ./build.sh nanopi_neo2.mk
          pushd scripts/sd-fuse
          wget https://github.com/vinewx/NanoWrt/releases/download/NEO2_Black/emmc-flasher-images.tgz
          mkdir eflasher
          tar xzvf emmc-flasher-images.tgz -C eflasher --strip-components=1
          popd
          sed -i '/download_img /d' scripts/sd-fuse/mk-emmc-image.sh
          sudo ./build.sh emmc-img

      - name: Zip Files
        run: |
          gzip out/*.img

      - name: Assemble Artifact
        id: assemble_artifact
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          cat kernel/.config > ./artifact/kernel.config
          cat openwrt/.config | openssl enc -aes-256-cbc -a -e -pass pass:"vinewx" -pbkdf2 > ./artifact/openwrt.config
          config_name="NEO2_v$(date "+%Y%m%d")_Config"
          emmc_path="./out/OpenWrt_$(date +%Y%m%d)_NanoPi-NEO2_aarch64_eflasher.img.gz"
          emmc_name="OpenWrt_$(date +%Y%m%d)_NanoPi-NEO2_aarch64_eflasher.img.gz"
          release_tag="v$(date +%Y%m%d)_NEO2"
          sd_path="./out/OpenWrt_$(date +%Y%m%d)_NanoPi-NEO2_aarch64_sd.img.gz"
          sd_name="OpenWrt_$(date +%Y%m%d)_NanoPi-NEO2_aarch64_sd.img.gz"
          echo "emmc_path=$emmc_path" >> $GITHUB_OUTPUT
          echo "emmc_name=$emmc_name" >> $GITHUB_OUTPUT
          echo "config_name=$config_name" >> $GITHUB_OUTPUT
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
          echo "sd_path=$sd_path" >> $GITHUB_OUTPUT
          echo "sd_name=$sd_name" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: ${{ steps.assemble_artifact.outputs.config_name }}
          path: ./artifact/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SEC_TOKEN }}
        with:
          tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
          release_name: Automatic Release ${{ steps.assemble_artifact.outputs.release_tag }}
          draft: false
          prerelease: false

      - name: Upload SD Asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.SEC_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.assemble_artifact.outputs.sd_path }}
          asset_name: ${{ steps.assemble_artifact.outputs.sd_name }}
          asset_content_type: application/gz

      - name: Upload EMMC Asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.SEC_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.assemble_artifact.outputs.emmc_path }}
          asset_name: ${{ steps.assemble_artifact.outputs.emmc_name }}
          asset_content_type: application/gz

      - name: Delete Workflow Runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 90
          keep_minimum_runs: 0
